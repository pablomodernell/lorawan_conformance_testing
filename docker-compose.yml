version: '3'

volumes:
  volume_message-broker:
  volume_postgres:


services:
  message-broker:
    image: rabbitmq:3-management
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 5s
      retries: 2
    volumes:
      - ./docker_images/rabbitmq/config:/etc/rabbitmq/:ro
#      - volume_message-broker:/var/lib/rabbitmq
    hostname: message-broker
    expose:
      - "1883"
      - "8883"
    ports:
      - "${RABBIT_PORT}:5672"
      - "${RABBIT_MANAGE_PORT}:15672"
    restart: on-failure

  test-application-server:
    depends_on:
      - message-broker
      - command-manager
      - notification-displayer
    image: "${DOCKER_REPO}-test_application_server:${TAS_VERSION}${SUFFIX}"
    environment:
      - "AMQP_URL=${AMQP_URL}"
      - "TAS_RESET_ATTEMPTS=${TAS_RESET_ATTEMPTS}"
    env_file:
      - env_var
    restart: on-failure
    command: ["python3", "/test_application_server/tas_application_server_main.py"]

  command-manager:
    depends_on:
      - message-broker
    image: "${DOCKER_REPO}-command_manager:${CM_VERSION}${SUFFIX}"
    environment:
      - "AMQP_URL=${AMQP_URL}"
    env_file:
      - env_var
    restart: on-failure
    command: ["python3", "/command_manager/main.py"]

  notification-displayer:
    depends_on:
      - message-broker
    image: "${DOCKER_REPO}-notification_displayer:${ND_VERSION}${SUFFIX}"
    environment:
      - "AMQP_URL=${AMQP_URL}"
    env_file:
      - env_var
    expose:
      - "5000"
    ports:
      - "${UI_PORT}:5000"
    restart: on-failure
    command: ["python3", "user_interface/notification_displayer/displayer_app.py"]

  agent-mock:
    depends_on:
      - message-broker
    image: "${DOCKER_REPO}-agent_mock:${AM_VERSION}${SUFFIX}"
    environment:
      - "AMQP_URL=${AMQP_URL}"
    env_file:
      - env_var
    restart: on-failure
    command: ["cl_msg_forging"]

  agent:
    depends_on:
      - message-broker
    image: "${DOCKER_REPO}-agent:${A_VERSION}${SUFFIX}"
    environment:
      - "AMQP_URL=${AMQP_URL}"
    env_file:
      - env_var
    expose:
      - "1700"
    ports:
      - "${AGENT_PORT}:1700/udp"
    restart: on-failure
    command: ["python3", "/agent/lorawan/user_agent/bridge/bridge_main.py"]

  cli:
    depends_on:
      - message-broker
    image: "${DOCKER_REPO}-agent_mock:${AM_VERSION}${SUFFIX}"
    environment:
      - "AMQP_URL=${AMQP_URL}"
    env_file:
      - env_var
    restart: on-failure


  postgres:
    image: timescale/timescaledb-postgis:1.4.2-pg11
    volumes:
      - volume_postgres:/var/lib/postgresql/data/
    expose:
      - "5432"
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=CushVenyayz0
    restart: on-failure
